// *** GENERATED BY PRISMIX :: DO NOT EDIT ***
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

model User {
  id                 String   @id
  name               String
  email              String   @unique
  phone              String   @unique
  cpf                String   @unique
  password           String
  birth              String?
  gender             Gender?
  address_id         Int?     @unique
  address            Address? @relation(name: "AddressToUser", fields: [address_id], references: [id], onDelete: Cascade)
  pets               Pet[]    @relation(name: "PetToUser")
  profile_picture_id String?  @unique
  profile_picture    Media?   @relation(name: "MediaToUser", fields: [profile_picture_id], references: [id], onDelete: SetNull)
}

model Address {
  id         Int        @id @default(autoincrement())
  user_id    String?
  user       User?      @relation(name: "AddressToUser")
  street     String
  number     String
  district   String
  complement String?
  city       String
  uf         String
  postcode   String
  providers  Provider[] @relation(name: "AddressToProvider")
}

model Pet {
  id                 String     @id
  user_id            String?
  user               User?      @relation(name: "PetToUser", fields: [user_id], references: [id], onDelete: SetNull)
  name               String
  species            String?
  breed              String?
  birth              String?
  weight             String?
  sex                Sex?
  color              String?
  diet_restriction   Diet[]     @relation(name: "diet_restriction")
  diet_preferred     Diet[]     @relation(name: "diet_preferred")
  behaviors          Behavior[] @relation(name: "BehaviorToPet")
  emergency_contact  String?
  profile_picture_id String?    @unique
  profile_picture    Media?     @relation(name: "MediaToPet", fields: [profile_picture_id], references: [id], onDelete: SetNull)
  gallery            Media[]    @relation(name: "pet-gallery")
  providers          Provider[] @relation(name: "PetToProvider")
  type               PetType?
  schedules          Schedule[] @relation(name: "PetToSchedule")
}

model Media {
  id               String     @id
  user_profile     User?      @relation(name: "MediaToUser")
  url              String
  type             MediaType
  position         Int        @default(1)
  width            Int
  height           Int
  pet_profile      Pet?       @relation(name: "MediaToPet")
  pet_gallery      Pet[]      @relation(name: "pet-gallery")
  provider_profile Provider?  @relation(name: "MediaToProvider")
  provider_gallery Provider[] @relation(name: "provider-gallery")
}

model Behavior {
  id          Int     @id @default(autoincrement())
  name        String
  description String? @db.Text
  pets        Pet[]   @relation(name: "BehaviorToPet")
}

model Diet {
  id          Int     @id @default(autoincrement())
  name        String
  quantity    String?
  interval    String?
  notes       String? @db.Text
  preferred   Pet[]   @relation(name: "diet_preferred")
  restriction Pet[]   @relation(name: "diet_restriction")
}

model Provider {
  id                 String          @id
  name               String
  document           String
  type               Type
  address_id         Int
  address            Address         @relation(name: "AddressToProvider", fields: [address_id], references: [id], onDelete: Cascade)
  pets               Pet[]           @relation(name: "PetToProvider")
  pet_type           PetType
  services           Service[]       @relation(name: "ProviderToService")
  business_hours     BusinessHours[] @relation(name: "BusinessHoursToProvider")
  profile_picture_id String?         @unique
  profile_picture    Media?          @relation(name: "MediaToProvider", fields: [profile_picture_id], references: [id], onDelete: SetNull)
  gallery            Media[]         @relation(name: "provider-gallery")
  schedules          Schedule[]      @relation(name: "ProviderToSchedule")
}

model BusinessHours {
  id        Int        @id @default(autoincrement())
  providers Provider[] @relation(name: "BusinessHoursToProvider")
}

model Service {
  id        Int        @id @default(autoincrement())
  providers Provider[] @relation(name: "ProviderToService")
  schedules Schedule[] @relation(name: "ScheduleToService")
  type      Services
}

model Schedule {
  id          Int      @id @default(autoincrement())
  pet_id      String
  pet         Pet      @relation(name: "PetToSchedule", fields: [pet_id], references: [id], onDelete: Cascade)
  provider_id String
  provider    Provider @relation(name: "ProviderToSchedule", fields: [provider_id], references: [id], onDelete: Cascade)
  datetime    String
  service_id  Int
  service     Service  @relation(name: "ScheduleToService", fields: [service_id], references: [id], onDelete: Cascade)
  recurrent   Boolean
}

enum Gender {
  male
  female
  other
  undefined
}

enum MediaType {
  video
  image
}

enum Sex {
  male
  female
  undefined
}

enum PetType {
  exotic
  domestic
  rural
}

enum Type {
  autonomous
  business
}

enum Services {
  medical
  esthetics
  lodging
  walking
  healthcare
  breeding
  transport
  homecare
}
